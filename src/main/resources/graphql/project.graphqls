type Project {
    id: UUID!
    name: String!
    description: String

    projectSettings: ProjectSettings!

    currentSprint: Sprint
    # previousSprint: Sprint
    sprints: [Sprint!]!

    users: [UserInProject!]!
    currentUser: UserInProject

    # meetings
    activePlanningMeeting: PlanningMeeting
    activeStandupMeeting: StandupMeeting
    activeRetrospectiveMeeting: RetrospectiveMeeting

    # roles
    roles: [UserRoleInProject!]!
    role(name: String!): UserRoleInProject

}

type ProjectSettings {
    codeRepositorySettings: CodeRepositorySettings!
    imsSettings: IMSSettings!
}

type IMSSettings {
    imsName: String!

}

type CodeRepositorySettings {
    codeRepositoryName: String!
}

input CreateProjectInput {
    name: String! @NotBlank
    description: String

    projectSettings: ProjectSettingsInput!
}

input UpdateProjectInput {
    name: String! @NotBlank
    description: String

    projectSettings: ProjectSettingsInput!
}

input ProjectSettingsInput {
    codeRepositorySettings: CodeRepositorySettingsInput!
    imsSettings: ImsSettingsInput!
}

input ImsSettingsInput {
    imsName: String!
}

input CodeRepositorySettingsInput {
    codeRepositoryName: String!
}

type ProjectMutation {
    id: UUID!
    joinMeeting(type: MeetingType!): Meeting!
    leaveMeeting(type: MeetingType!): Meeting!
    pingMeeting(type: MeetingType!): Meeting!
    promoteToMeetingLeader(type: MeetingType!, userId: UUID!): Meeting!

    createPlanningMeeting(input: PlanningMeetingInput!): PlanningMeeting!
    mutatePlanningMeeting: PlanningMeetingMutation!

    createRole(input: CreateProjectRoleInput!): UserRoleInProject!
    updateRole(name: String!, input: UpdateProjectRoleInput!): UserRoleInProject!
    deleteRole(name: String!): Boolean!

    createSprint(input: CreateSprintInput): Sprint!
}