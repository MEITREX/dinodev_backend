"""
The PlanningMeeting represents the SCRUM planning meeting.
"""
type PlanningMeeting implements Meeting {
    """
    The settings of the planning meeting.
    """
    planningSettings: PlanningSettings!
    """
    The current page.
    """
    currentPage: PlanningMeetingPage!
    """
    Details about the animal voting.
    """
    animalVoting: AnimalVoting!
    """
    Details about the name voting.
    """
    nameVoting: NameVoting!
    """
    Details about the current issue estimation.
    """
    issueEstimation: IssueEstimation!
    """
    Details about the sprint goal voting.
    """
    sprintGoalVoting: SprintGoalVoting!

    # inherited from Meeting:
    """
    The type of the meeting, must be PLANNING.
    """
    meetingType: MeetingType!
    """
    If the meeting is currently active.
    """
    active: Boolean!
    """
    The attendees of the meeting.
    Contains at most one meeting leader.
    """
    attendees: [MeetingAttendee!]!

    """
    The id of the project that the meeting is associated with.
    """
    projectId: UUID!
}

"""
The pages of the planning meeting.
"""
enum PlanningMeetingPage {
    INFORMATION
    CHOOSE_ANIMAL
    NAME_ANIMAL
    ESTIMATE_ISSUES
    SPRINT_GOAL
}

"""
The settings of the planning meeting.
"""
type PlanningSettings {
    """
    The duration of the sprint in days.
    """
    sprintDurationDays: Int
    """
    The start date of the sprint.
    """
    sprintStartDate: DateTime!
    """
    A custom reward for the gold challenge. (currently not used)
    """
    customGoldChallengeReward: String
}

"""
Details about the animal voting.
"""
type AnimalVoting {
    """
    The animals that can be voted for.
    """
    votableAnimals: [Animal!]!
    """
    The voting states for each animal, containing the votes of the users.
    """
    animalVotingStates: [AnimalVotingState!]!

    """
    If the animal voting is finished.
    """
    finished: Boolean!
    """
    If the animal voting is finished, the result of the voting.
    """
    votingResult: Animal
}

"""
Holds the votes for an animal.
"""
type AnimalVotingState {
    """
    The animal that is voted for.
    """
    votedFor: Animal!
    """
    The votes for the animal.
    """
    userVotes: [Vote!]!
    """
    The total number of votes for the animal.
    """
    totalVotes: Int!
}

"""
Holds the votes for a name.
"""
type NameVotingState {
    """
    The name that is voted for.
    """
    votedFor: String!
    """
    The votes for the name.
    """
    userVotes: [Vote!]!
    """
    The total number of votes for the name.
    """
    totalVotes: Int!
}

"""
Represents a vote for a name or animal.
"""
type Vote {
    """
    The id of the user who voted.
    """
    userId: UUID!
    """
    The user who voted.
    """
    user: GlobalUser!
}

"""
Details about the name voting.
"""
type NameVoting {
    """
    The names that can be voted for.
    """
    votableNames: [String!]!
    """
    The voting states for each name, containing the votes of the users.
    """
    nameVotingStates: [NameVotingState!]!

    """
    If the name voting is finished.
    """
    finished: Boolean!
    """
    If the name voting is finished, the result of the voting.
    """
    votingResult: String
}

"""
Details about the issue estimation.
"""
type IssueEstimation {
    planningMeeting: PlanningMeeting!

    votes: [EstimationVote!]!
    finished: Boolean!
    issueId: ID
    issue: Issue @OnDemand

    countdownSeconds: Int

    estimationStats: EstimationStats @OnDemand

    finalResult: TShirtSizeEstimation
}

"""
Statistics about the estimations.
"""
type EstimationStats {
    median: TShirtSizeEstimation
    max: TShirtSizeEstimation
    min: TShirtSizeEstimation
    mode: TShirtSizeEstimation
}

"""
Holds the votes for an estimation.
"""
type EstimationVote {
    votedFor: TShirtSizeEstimation!
    userVotes: [Vote!]!
    totalVotes: Int!
}

"""
Details about the sprint goal voting.
"""
type SprintGoalVoting {
    planningMeeting: PlanningMeeting!

    sprintIssueIds: [ID!]!
    nonSprintIssueIds: [ID!]!

    sprintIssues: [Issue!]! @OnDemand
    nonSprintIssues: [Issue!]! @OnDemand

    finished: Boolean!
}

"""
Wrapper type for all operations on the planning meeting.
"""
type PlanningMeetingMutation {
    project: Project!
    changePage(page: PlanningMeetingPage!): PlanningMeeting!

    # animal voting
    """
    Add a vote for an animal.
    """
    voteAnimal(animal: Animal!): PlanningMeeting!
    """
    For meeting leader: End the animal voting.
    """
    endAnimalVoting: PlanningMeeting! @OnDemand

    # name voting
    """
    Adds a new name that can be voted for.
    """
    addName(name: String!): PlanningMeeting!
    """
    Adds a vote for a name.
    """
    voteName(name: String!): PlanningMeeting!
    """
    For meeting leader: End the name voting.
    """
    endNameVoting: PlanningMeeting! @OnDemand

    """
    Vote for a t-shirt size on the current issue.
    """
    voteEstimation(estimation: TShirtSizeEstimation!): PlanningMeeting!
    """
    For meeting leader: Restart the estimation of the current issue.
    """
    restartEstimation: PlanningMeeting! @OnDemand
    """
    For meeting leader: Selects an issue to estimate.
    """
    nextIssue(issueId: String): PlanningMeeting!
    """
    For meeting leader: Start a countdown for the estimation.
    After the countdown, the estimation will end, as if "endEstimation" was called.
    """
    startCountdown(seconds: Int! @Positive): PlanningMeeting! @OnDemand
    """
    For meeting leader: End the estimation of the current issue.
    """
    endEstimation: PlanningMeeting! @OnDemand
    """
    Confirm the final estimation result.
    """
    setFinalResult(
        """
        The final estimation result.
        """
        estimation: TShirtSizeEstimation!,
        """
        Optional: user ids that should be assigned to the issue.
        """
        assignUserIds: [UUID!]! = []): PlanningMeeting!

    """
    Adds an issue to the sprint goal.
    """
    addSprintIssue(issueId: String!): PlanningMeeting!
    """
    Removes an issue from the sprint goal.
    """
    removeSprintIssue(issueId: String!): PlanningMeeting!
    """
    For meeting leader: End the sprint goal voting.
    """
    finishSprintGoalVoting: PlanningMeeting! @OnDemand

    """
    For meeting leader: Finish the planning meeting.
    """
    finishMeeting: Sprint!
}

input PlanningMeetingInput {
    meetingLeaderId: UUID!
    planningSettings: PlanningSettingsInput!
}

input PlanningSettingsInput {
    sprintDurationDays: Int!
    sprintStartDate: DateTime!
    goldChallengeCustomReward: String
}