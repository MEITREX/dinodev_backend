type Mutation {
    # projects
    createProject(input: CreateProjectInput!): Project!
    updateProject(id: UUID!, input: UpdateProjectInput!): Project!
    deleteProject(id: UUID!): Boolean!
    mutateProject(id: UUID!): ProjectMutation!

    # user
    register(input: CreateGlobalUserInput!): GlobalUser!
    joinProject(projectId: UUID!): UserInProject!

    updateGlobalUser(id: UUID!, input: UpdateGlobalUserInput!): GlobalUser!
    grantRole(userId: UUID!, roleName: String!): GlobalUser!
    revokeRole(userId: UUID!, roleName: String!): GlobalUser!
    deleteUser(id: UUID!): Boolean!

    createGlobalUserRole(input: CreateGlobalUserRoleInput!): GlobalUserRole!
    updateGlobalUserRole(name: String!, input: UpdateGlobalUserRoleInput!): GlobalUserRole!
    deleteGlobalUserRole(name: String!): Boolean!

    # event types
    createEventType(input: CreateEventTypeInput!): EventType!
    updateEventType(id: String!, input: UpdateEventTypeInput!): EventType!
    deleteEventType(id: String!): Boolean!
}

type Query {
    # projects
    projects: [Project!]!
    project(id: UUID!): Project

    # users
    globalUsers: [GlobalUser!]!
    globalUser(id: UUID!): GlobalUser
    currentUser: GlobalUser
    currentUserInfo: BasicUserInfo

    # roles
    globalUserRoles: [GlobalUserRole!]!
    globalUserRole(name: String!): GlobalUserRole

    # event types
    eventTypes: [EventType!]!
    eventType(id: String!): EventType

    # shop
    shopItems: [ShopItem!]!
}

type Subscription {
    meeting(projectId: UUID!, meetingType: MeetingType!): Meeting
    planningMeeting(projectId: UUID!): PlanningMeeting
    standupMeeting(projectId: UUID!): StandupMeeting!
    event(projectId: UUID!, userId: UUID!): Event!
    #    retrospectiveMeetingUpdated(projectId: UUID!): RetrospectiveMeeting!

}