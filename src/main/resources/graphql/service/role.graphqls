"""
Roles are used to define the permissions of a user in a project.
A user can have multiple roles in a project.

NOTE: Project-level privileges/roles are NOT implemented yet.
While the general framework is in place, an actual differentiation
between roles has yet to be implemented.
"""
type ProjectRole {
    name: String!
    gamifiedName: String!
    projectId: UUID!
    project: Project! @OnDemand
    projectPrivileges: [ProjectPrivilege!]!
}

"""
Global roles define the permissions of a user on a global level.
They are not tied to a specific project.

Currently, there is only a distinction between admins and non-admins.
"""
type GlobalUserRole {
    name: String!
    globalPrivileges: [GlobalPrivilege!]!
}

"""
Privileges on the project level.

NOTE: This is NOT implemented yet. These are just suggestions.
Future work is needed to implement project-level privileges.
"""
enum ProjectPrivilege {
    READ_PROJECT
    UPDATE_PROJECT
    DELETE_PROJECT
    CREATE_SPRINT
    UPDATE_SPRINT
    DELETE_SPRINT
    CREATE_SHOP_ITEM
    UPDATE_SHOP_ITEM
    DELETE_SHOP_ITEM
    CREATE_USER
    UPDATE_USER
    DELETE_USER
    CREATE_ROLE
    UPDATE_ROLE
    DELETE_ROLE
    READ_USER_PRIVATE_INFO
}

"""
Privileges on the global level, i.e., not tied to a specific project.
Currently, UPDATE_ROLE and LIST_USERS are not used.
"""
enum GlobalPrivilege {
    CREATE_PROJECT
    CREATE_ROLE
    UPDATE_ROLE
    DELETE_ROLE
    READ_USER_PRIVATE_INFO
    CHANGE_ROLES
    UPDATE_USER
    DELETE_USER
    LIST_USERS
}

input CreateGlobalUserRoleInput {
    name: String!
    globalPrivileges: [GlobalPrivilege!]!
}

input UpdateGlobalUserRoleInput {
    globalPrivileges: [GlobalPrivilege!]!
}

input CreateProjectRoleInput {
    name: String!
    gamifiedName: String!
    projectPrivileges: [ProjectPrivilege!]!
}

input UpdateProjectRoleInput {
    gamifiedName: String!
    projectPrivileges: [ProjectPrivilege!]!
}