type Mutation {
    # projects
    createProject(input: CreateProjectInput!): Project!
    updateProject(id: UUID!, input: UpdateProjectInput!): Project!
    deleteProject(id: UUID!): Boolean!
    mutateProject(id: UUID!): ProjectMutation!

    # user
    register(input: CreateGlobalUserInput!): GlobalUser

    updateGlobalUser(id: UUID!, input: UpdateGlobalUserInput!): GlobalUser!
    grantRole(userId: UUID!, roleName: String!): GlobalUser!

    createGlobalUserRole(input: CreateGlobalUserRoleInput!): GlobalUserRole!
    updateGlobalUserRole(name: String!, input: UpdateGlobalUserRoleInput!): GlobalUserRole!
    deleteGlobalUserRole(name: String!): Boolean!
}

type Query {
    # projects
    projects: [Project!]!
    project(id: UUID!): Project

    # users
    globalUsers: [GlobalUser!]!
    globalUser(id: UUID!): GlobalUser
    currentUser: GlobalUser

    # roles
    globalUserRoles: [GlobalUserRole!]!
    globalUserRole(name: String!): GlobalUserRole
}

type Subscription {
}