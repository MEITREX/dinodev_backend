import io.github.kobylynskyi.graphql.codegen.gradle.GraphQLCodegenGradleTask

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.+'
    id 'io.spring.dependency-management' version '1.+'
    id "io.github.kobylynskyi.graphql.codegen" version "5.+"
    id "org.sonarqube" version "5.+"
    id "jacoco"
}

group = 'de.unistuttgart.iste.meitrex'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '21'

def jacocoEnabled = System.properties.getProperty("jacocoEnabled") ?: "true"

// Apply JaCoCo settings only if jacaco is enable
if (jacocoEnabled.toBoolean()) {
    project.logger.lifecycle('Applying jacoco settings from jacoco.gradle')
    apply from: rootProject.file("jacoco.gradle")
}

sonarqube {
    properties {
        property("sonar.projectKey", "MEITREX_scrum_game_service")
        property("sonar.organization", "meitrex")
        property("sonar.host.url", "https://sonarcloud.io")
    }
}

def fetchFilesFromRepo(String repository, List<String> files) {
    def baseurl = "https://raw.githubusercontent.com/MEITREX/"
    def fileUrl = "${baseurl}${repository}/main/src/main/resources/graphql/"
    def outputDir = "src/main/resources/graphql"

    files.each { file ->
        tasks.register("fetchExternalSchema-${file.capitalize()}", Exec) {
            commandLine 'curl', "${fileUrl}${file}", '-o', "${outputDir}/${repository}/${file}"
        }
    }
}

fetchFilesFromRepo("common", ["directives.graphqls", "scalars.graphqls", "sortFilterPagination.graphqls"])
fetchFilesFromRepo("scrum-game-ims-api", ["issue.graphqls"])
fetchFilesFromRepo("gamification_engine", ["event.graphqls"])

// run this task to fetch the latest schema files from the external github repositories
tasks.register("fetchAllExternalSchemas", Task) {
    dependsOn tasks.matching { it.name.startsWith("fetchExternalSchema-") }
}

// Automatically generate DTOs from GraphQL schema:
tasks.register('generateDtos', GraphQLCodegenGradleTask) {
    graphqlSchemas {
        rootDir = file("src/main/resources/graphql/service")
    }
    // all config options:
    // https://github.com/kobylynskyi/graphql-java-codegen/blob/main/docs/codegen-options.md
    outputDir = new File("$buildDir/generated/scrum-game")
    packageName = "de.unistuttgart.iste.meitrex.generated.dto"
    generatedAnnotation = "jakarta.annotation.Generated"
    modelValidationAnnotation = "jakarta.validation.constraints.NotNull"
    generateApis = false // set to false as the generator does not support spring boot graphQL
    customTypesMapping = [
            "DateTime" : "java.time.OffsetDateTime",
            "Date"     : "java.time.LocalDate",
            "Time"     : "java.time.OffsetTime",
            "LocalTime": "java.time.LocalTime",
            "UUID"     : "java.util.UUID",
            "Url"      : "java.net.URL",
    ]
    generateEqualsAndHashCode = true
    generateToString = true
    fieldsWithResolvers = ["@OnDemand"]
}

tasks.register('gropiusCodegen', GraphQLCodegenGradleTask) {
    graphqlSchemas {
        rootDir = file("src/main/resources/gropius")
        includePattern = "gropius"
    }
    outputDir = new File("$buildDir/generated/gropius")
    packageName = "de.unistuttgart.iste.gropius.generated.dto"
    generatedAnnotation = "jakarta.annotation.Generated"
    modelValidationAnnotation = "jakarta.validation.constraints.NotNull"
    generateApis = false // set to false as the generator does not support spring boot graphQL
    customTypesMapping = [
            "DateTime"       : "java.time.OffsetDateTime",
            "Date"           : "java.time.LocalDate",
            "Time"           : "java.time.OffsetTime",
            "LocalTime"      : "java.time.LocalTime",
            "UUID"           : "java.util.UUID",
            "Url"            : "java.net.URL",
            "JSON"           : "java.lang.Object",
            "DateTimeFilterInput.gt"      : "String",
            "Assignment.user"             : "GropiusGropiusUser", // concrete sub type to allow serialization of the user object
            "TimelineItemConnection.nodes": "de.unistuttgart.iste.meitrex.scrumgame.service.ims.gropius.GropiusProjections.TimelineItemResponse"
    ]
    modelNamePrefix = "Gropius"
    generateEqualsAndHashCode = true
    generateToString = true
    generateClient = true
    // add fields that should be generated in the model classes
    fieldsWithoutResolvers = ["Project", "Issue"]
}
// Automatically generate GraphQL code on project build:
compileJava.dependsOn 'generateDtos'
compileJava.dependsOn 'gropiusCodegen'

// Add generated sources to your project source sets:
sourceSets.main.java.srcDir "$buildDir/generated/scrum-game"
sourceSets.main.java.srcDir "$buildDir/generated/gropius"

tasks.register('generateApiDocs', Exec) {
    commandLine 'cmd', '/c', 'generate_api_doc.bat'
}

tasks.named('assemble') {
    finalizedBy('generateApiDocs')
}

def gropiusUrl = System.properties.getProperty("gropiusUrl") ?: "http://localhost:8080"

// run this task to refresh the Gropius schema
// it will download the schema from the Gropius server and save it to src/main/resources/graphql/gropius.graphqls
// this task is not run automatically, you have to run it manually (so you can control when the schema is updated)
// you can run it from the command line with `./gradlew refreshGropiusSchema`
tasks.register('refreshGropiusSchema', Exec) {
    def filePath = 'src/main/resources/gropius/gropius'

    commandLine 'curl', "${gropiusUrl}/sdl", '-o', filePath
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'de.unistuttgart.iste.meitrex:meitrex-common:1.0.4'
    implementation 'de.unistuttgart.iste.meitrex:scrum-game-ims-api:1.0.4'
    implementation 'de.unistuttgart.iste.meitrex:gamification_engine:1.0.4'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.modelmapper:modelmapper:3.+'
    implementation 'com.graphql-java:graphql-java-extended-scalars:22.0'
    implementation 'com.graphql-java:graphql-java-extended-validation:22.0'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation "io.github.kobylynskyi:graphql-java-codegen:5.+"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.mvel:mvel2:2.5.2.Final'
    implementation 'org.apache.commons:commons-text:1.12.+'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'de.unistuttgart.iste.meitrex:meitrex-common-test:1.0.4'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework:spring-webflux'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation "org.mockito:mockito-core:5.+"
    testImplementation 'org.hamcrest:hamcrest:2.+'
    testImplementation "org.testcontainers:postgresql:1.+"
    testImplementation "org.testcontainers:junit-jupiter:1.+"
    testImplementation 'org.exparity:hamcrest-date:2.0.8'
}

tasks.named('test') {
    useJUnitPlatform()
}
