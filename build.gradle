plugins {
    id 'java'
    id 'org.springframework.boot' version '3.+'
    id 'io.spring.dependency-management' version '1.+'
    id "io.github.kobylynskyi.graphql.codegen" version "5.+"
    id "org.sonarqube" version "4.+"
    id "jacoco"

}

group = 'de.unistuttgart.iste.meitrex'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '21'

def jacocoEnabled = System.properties.getProperty("jacocoEnabled") ?: "true"

// Apply JaCoCo settings only if jacaco is enable
if (jacocoEnabled.toBoolean()) {
    project.logger.lifecycle('Applying jacoco settings from jacoco.gradle')
    apply from: rootProject.file("jacoco.gradle")
}

sonarqube {
    properties {
        property("sonar.projectKey", "MEITREX_scrum_game_service")
        property("sonar.organization", "meitrex")
        property("sonar.host.url", "https://sonarcloud.io")
    }

}

// Automatically generate DTOs from GraphQL schema:
graphqlCodegen {
	// all config options:
	// https://github.com/kobylynskyi/graphql-java-codegen/blob/main/docs/codegen-options.md
	outputDir = new File("$buildDir/generated")
	packageName = "de.unistuttgart.iste.meitrex.generated.dto"
	generatedAnnotation = "jakarta.annotation.Generated"
	modelValidationAnnotation = "jakarta.validation.constraints.NotNull"
	generateApis = false // set to false as the generator does not support spring boot graphQL
	customTypesMapping = [
			"DateTime" : "java.time.OffsetDateTime",
			"Date"     : "java.time.LocalDate",
			"Time"     : "java.time.OffsetTime",
			"LocalTime": "java.time.LocalTime",
			"UUID"     : "java.util.UUID",
			"Url"      : "java.net.URL",
	]
	generateEqualsAndHashCode = true
	generateToString = true
}

// Automatically generate GraphQL code on project build:
compileJava.dependsOn 'graphqlCodegen'

// Add generated sources to your project source sets:
sourceSets.main.java.srcDir "$buildDir/generated"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'de.unistuttgart.iste.meitrex:meitrex-common:1.0.2'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.modelmapper:modelmapper:3.+'
    implementation 'com.graphql-java:graphql-java-extended-scalars:20.0'
    implementation 'com.graphql-java:graphql-java-extended-validation:20.0'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.security:spring-security-oauth2-resource-server'
    implementation 'org.springframework.security:spring-security-oauth2-jose'
    implementation "io.github.kobylynskyi:graphql-java-codegen:5.+"
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'de.unistuttgart.iste.meitrex:meitrex-common-test:1.1.0-pre2'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework:spring-webflux'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation "org.mockito:mockito-core:5.+"
    testImplementation 'org.hamcrest:hamcrest:2.+'
    testImplementation "org.testcontainers:postgresql:1.+"
    testImplementation "org.testcontainers:junit-jupiter:1.+"
    testImplementation 'org.exparity:hamcrest-date:2.0.8'
}

tasks.named('test') {
    useJUnitPlatform()
}
